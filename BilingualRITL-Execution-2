(clear-all)

(define-model execution

(chunk-type ritl-stimulus x y)
(chunk-type ritl-instructions first second third)
(chunk-type operation argument1 operator argument2 trial)

(add-dm (stimulus isa ritl-stimulus 
x 5 
y 6))

;;; Instructions in memory
(add-dm (inst isa ritl-instructions first double-1 second half-1 third add-1))
;;; Operations
(add-dm (double-1 isa operation argument1 x operator times argument2 2 trial inst))
(add-dm (half-1 isa operation argument1 x operator / argument2 2 trial inst))
(add-dm (add-1 isa operation argument1 x operator add argument2 y trial inst))

(set-buffer-chunk 'visual 'stimulus)

(p calculate-x
  "Calculate unary operation and save on scratchpad"
  =visual>
    isa      visual-object
    x       =X
    y       =y

==>
  +goal>
    isa ritl-instructions
    first double-1

 +retrieval>
    isa operation
    argument1    =x
    operator  times
    argument2  2
)

(set-buffer-chunk 'visual 'stimulus)

(p calculate-binary
  "Calculate unary operation and save on scratchpad"
  =visual>
    isa      visual-object
    x       =X
    y       =y

==>
  +goal>
    isa ritl-instructions
    third add-1

 +retrieval>
    isa operation
    argument1    =x
    operator  add
    argument2  =y
)

)