(clear-all)

(define-model encoding

(sgp :trace-detail            high 
     :show-focus              t 
     :esc                     t 
     :lf                      0.9 
     :mas                     1.6 
     :imaginal-activation     1.0 

     ;; Productions
     :epl                     t 
     :ul                      t
     :ult			      t

     ;; Perceptual params
     :auto-attend             t 
     :visual-finst-span       10.0)

;;; RITL chunks
(chunk-type ritl-instructions first second third)
(chunk-type ritl-stimulus x y)

;;; Arithmetic chunks
(chunk-type arithmetic-fact operation arg1 arg2 result)
(chunk-type operation task type argument1 operator argument2 position)
(chunk-type scratchpad x y result position state task)
(chunk-type serial position task)

;;; Visual
(add-dm (screen isa chunk)
	(instructions isa chunk)
	(inputs isa chunk)
	(probe isa chunk)
	(probe-responded isa chunk)
	(fixation isa chunk)
	(fixation1 isa chunk)
	(fixation2 isa chunk)
	(blank isa chunk)
	(feedback isa chunk)
	(operation isa chunk)
	(variable isa chunk))


(define-chunks ritl-stimulus x y)
(define-chunks ritl-instructions first second third)

;;; Declarative memory
(add-dm (x isa chunk) (y isa chunk) (* isa chunk) (+ isa chunk)
	(/ isa chunk) (unary isa chunk) (binary isa chunk))
(add-dm (inst isa ritl-instructions first double second half third add))
(add-dm (stimulus isa ritl-stimulus 
x 5 
y 6))
;;; Operations
(add-dm (double-1 isa operation task double argument1 x operator * argument2 2 type unary))
(add-dm (half-1 isa operation task half argument1 x operator / argument2 2 type unary))
(add-dm (add-1 isa operation task add argument1 x operator + argument2 y type binary position 3))

;;; Instruction

;;; Normally, look at the screen & instructions, but for now:
(set-buffer-chunk 'visual 'inst)

(p prepare-for-encoding 
   "Prepares to encode operations when the instructions are on"
  ?imaginal>
    state        free
    buffer       empty
  =visual>
    isa      ritl-instructions
    first    =task1
    second   =task2
    third    =task3

==>
  =visual>
  +imaginal>
    isa          serial
    position     1
    task        =task1
)

(p encode-x-operation
   "Encodes x operation"
  =imaginal>
    isa          serial
    position    1
    task        =task1
  =visual>
    isa      ritl-instructions
    first    =task1
    second   =task2
    third    =task3
==>
  =visual>
  +retrieval>
    isa      operation
    task    =task1
    argument2   2
    type unary
    position  1
  =imaginal>
    isa serial
    position 2
    task  =task2
)

(p encode-y-operation
   "Encodes y operation"
  =imaginal>
    isa         serial
    position    2
    task        =task2
  =visual>
    isa      ritl-instructions
    fist     =task1
    second   =task2
    third    =task3
==>
  =visual>
  +retrieval>
    isa      operation
    task    =task2
    argument2   2
    type unary
    position  2
  =imaginal>
    isa serial
    position 3
    task  =task3
)

(p encode-binary-operation
  =visual>
    isa      ritl-instructions
    third    =TASK3
  =imaginal>
    isa serial
    position 3
    task  =task3
==>
  =visual>
  +retrieval>
    isa      operation
    task      =task3
    type    binary
    position 3

)

;;; --------------------------------------------------------------
;;; Press a key when done
;;; --------------------------------------------------------------

(p go-through-instructions
   "Presses a key after instructions have been encoded"
  ?imaginal>
    state        free
  =imaginal>
    isa          serial
    position     3
  =goal>
    isa          operation
  - arg1         nil
  - arg2         nil

  ?manual>
    preparation  free
    execution    free
==>
  -goal>
  -visual>
  -visual-location>
  =imaginal>
  +manual>
    isa          press-key
    key          "2"
)


;;; Execution

;;;(set-buffer-chunk 'visual 'stimulus)

(p calculate-binary
  "Calculate unary operation and save on scratchpad"
  =visual>
    isa      visual-object
    x       =X
    y       =y

==>
  +goal>
    isa ritl-instructions
    third add-1

 +retrieval>
    isa operation
    argument1    =x
    operator  add
    argument2  =y
)

)