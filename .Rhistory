# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session1Trials <- generatePracticeTrials()
generateSession2Trials <- function(numPracticedCombinations = 2, practiceInst = session1Trials) {
# WARNING: Chances are that filler items are identical to practiced trials
practiceInst <- rbind(practiceInst,data.frame(
operatorTask1 = sample(unary,numPracticedCombinations*10,T), operatorTask2 = sample(unary,numPracticedCombinations*10,T), operatorTask3 = sample(binary,numPracticedCombinations*10,T),
x = 0, y = 0, probe = 0,  stringsAsFactors = F))
# Solve operations
for (i in 1:length(practiceInst$probe)) {
while((1>practiceInst$probe[i]) | (practiceInst$probe[i]>49)) {
practiceInst$x[i] <- sample(1:9,1)
practiceInst$y[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
while (!floor(tempX)) {
practiceInst$x[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
}
while (!floor(tempY)) {
practiceInst$y[i] <- sample(1:9,1)
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
}
practiceInst$probe[i] <- floor(match.fun(practiceInst$operatorTask3[i])(tempX,tempY))
}
}
# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session2Trials <- generateSession2Trials()
modelTrials <- rbind(session1Trials,session2Trials)
exportStimuli <- paste("((", modelTrials$operatorTask1, modelTrials$operatorTask2, modelTrials$operatorTask3, ")","(",modelTrials$x,modelTrials$y,")",modelTrials$probe,")")
write(exportStimuli,"trials",ncolumns=1)
View(modelTrials)
duplicated.data.frame(modelTrials)
duplicated.data.frame(modelTrials[,1:5])
sum(duplicated.data.frame(modelTrials[,1:5]))
## MAKE DATA FROM SCRATCH
unary <- c("DOUBLE","TRIPLE","INCREMENT", "DECREMENT","THIRD", "HALF")
binary <- c("TIMES","DIVIDE","ADD", "SUBTRACT")
#Define functions
DECREMENT <- function(x) {x-1}
THIRD <- function(x) {x/3}
INCREMENT <- function(x) {x+1}
TRIPLE <- function(x) {x*3}
HALF <- function(x) {x/2}
DOUBLE <- function(x) {x*2}
SUBTRACT <- function(x, y) {x-y}
TIMES <- function(x,y) {x*y}
DIVIDE <- function(x,y) {x/y}
ADD <- function(x,y) {x+y}
generatePracticeTrials <- function(numPracticedCombinations = 2) {
practiceInst <- data.frame(
operatorTask1 = rep(sample(unary,1),10), operatorTask2 = rep(sample(unary,1),10), operatorTask3 = rep(sample(binary,1),10),
x = sample(1:9,10,T), y = sample(1:9,10,T), probe = 0,  stringsAsFactors = F)
while (nrow(practiceInst)/10 != numPracticedCombinations) {
practiceInst <- rbind(practiceInst,data.frame(
operatorTask1 = rep(sample(unary,1),10), operatorTask2 = rep(sample(unary,1),10), operatorTask3 = rep(sample(binary,1),10),
x = 0, y = 0, probe = 0,  stringsAsFactors = F))
}
# Solve operations
for (i in 1:length(practiceInst$probe)) {
while((1>practiceInst$probe[i]) | (practiceInst$probe[i]>49)) {
practiceInst$x[i] <- sample(1:9,1)
practiceInst$y[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
while (!floor(tempX)) {
practiceInst$x[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
}
while (!floor(tempY)) {
practiceInst$y[i] <- sample(1:9,1)
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
}
practiceInst$probe[i] <- floor(match.fun(practiceInst$operatorTask3[i])(tempX,tempY))
}
}
# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session1Trials <- generatePracticeTrials()
generateSession2Trials <- function(numPracticedCombinations = 2, practiceInst = session1Trials) {
# WARNING: Chances are that filler items are identical to practiced trials
practiceInst <- rbind(practiceInst,data.frame(
operatorTask1 = sample(unary,numPracticedCombinations*10,T), operatorTask2 = sample(unary,numPracticedCombinations*10,T), operatorTask3 = sample(binary,numPracticedCombinations*10,T),
x = 0, y = 0, probe = 0,  stringsAsFactors = F))
# Solve operations
for (i in 1:length(practiceInst$probe)) {
while((1>practiceInst$probe[i]) | (practiceInst$probe[i]>49)) {
practiceInst$x[i] <- sample(1:9,1)
practiceInst$y[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
while (!floor(tempX)) {
practiceInst$x[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
}
while (!floor(tempY)) {
practiceInst$y[i] <- sample(1:9,1)
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
}
practiceInst$probe[i] <- floor(match.fun(practiceInst$operatorTask3[i])(tempX,tempY))
}
}
# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session2Trials <- generateSession2Trials()
## MAKE DATA FROM SCRATCH
unary <- c("DOUBLE","TRIPLE","INCREMENT", "DECREMENT","THIRD", "HALF")
binary <- c("TIMES","DIVIDE","ADD", "SUBTRACT")
#Define functions
DECREMENT <- function(x) {x-1}
THIRD <- function(x) {x/3}
INCREMENT <- function(x) {x+1}
TRIPLE <- function(x) {x*3}
HALF <- function(x) {x/2}
DOUBLE <- function(x) {x*2}
SUBTRACT <- function(x, y) {x-y}
TIMES <- function(x,y) {x*y}
DIVIDE <- function(x,y) {x/y}
ADD <- function(x,y) {x+y}
generatePracticeTrials <- function(numPracticedCombinations = 2) {
practiceInst <- data.frame(
operatorTask1 = rep(sample(unary,1),10), operatorTask2 = rep(sample(unary,1),10), operatorTask3 = rep(sample(binary,1),10),
x = sample(1:9,10,T), y = sample(1:9,10,T), probe = 0,  stringsAsFactors = F)
while (nrow(practiceInst)/10 != numPracticedCombinations) {
practiceInst <- rbind(practiceInst,data.frame(
operatorTask1 = rep(sample(unary,1),10), operatorTask2 = rep(sample(unary,1),10), operatorTask3 = rep(sample(binary,1),10),
x = 0, y = 0, probe = 0,  stringsAsFactors = F))
}
# Solve operations
for (i in 1:length(practiceInst$probe)) {
while((1>practiceInst$probe[i]) | (practiceInst$probe[i]>49)) {
practiceInst$x[i] <- sample(1:9,1)
practiceInst$y[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
while (!floor(tempX)) {
practiceInst$x[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
}
while (!floor(tempY)) {
practiceInst$y[i] <- sample(1:9,1)
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
}
practiceInst$probe[i] <- floor(match.fun(practiceInst$operatorTask3[i])(tempX,tempY))
}
}
# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session1Trials <- generatePracticeTrials()
generateSession2Trials <- function(numPracticedCombinations = 2, practiceInst = session1Trials) {
# WARNING: Chances are that filler items are identical to practiced trials
practiceInst <- rbind(practiceInst,data.frame(
operatorTask1 = sample(unary,numPracticedCombinations*10,T), operatorTask2 = sample(unary,numPracticedCombinations*10,T), operatorTask3 = sample(binary,numPracticedCombinations*10,T),
x = 0, y = 0, probe = 0,  stringsAsFactors = F))
# Solve operations
for (i in 1:length(practiceInst$probe)) {
while((1>practiceInst$probe[i]) | (practiceInst$probe[i]>49)) {
practiceInst$x[i] <- sample(1:9,1)
practiceInst$y[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
while (!floor(tempX)) {
practiceInst$x[i] <- sample(1:9,1)
tempX <- match.fun(practiceInst$operatorTask1[i])(practiceInst$x[i])
}
while (!floor(tempY)) {
practiceInst$y[i] <- sample(1:9,1)
tempY <- match.fun(practiceInst$operatorTask2[i])(practiceInst$y[i])
}
practiceInst$probe[i] <- floor(match.fun(practiceInst$operatorTask3[i])(tempX,tempY))
}
}
# Add mistakes (-1 or +1) and randomize
mistakeRows <- sample(nrow(practiceInst),nrow(practiceInst)/2)
practiceInst$probe[mistakeRows] <- practiceInst$probe[mistakeRows]-1
practiceInst[practiceInst$probe == 0,"probe"] <- practiceInst[practiceInst$probe == 0,"probe"]+2 # If the probe becomes 0, make it 2
practiceInst <- practiceInst[sample(nrow(practiceInst),nrow(practiceInst)),]
return(practiceInst)
}
session2Trials <- generateSession2Trials()
modelTrials <- rbind(session1Trials,session2Trials)
exportStimuli <- paste("((", modelTrials$operatorTask1, modelTrials$operatorTask2, modelTrials$operatorTask3, ")","(",modelTrials$x,modelTrials$y,")",modelTrials$probe,")")
write(exportStimuli,"trials",ncolumns=1)
sum(duplicated.data.frame(modelTrials[,1:5]))
modelMonolingual <- read.csv("~/Documents/GitHub/ACTR_RITL/modelMonolingual5.txt")
session2Mono <- modelMonolingual[21:60,]
session2Mono$Practiced <- session2Mono$Rule == "(INCREMENT DOUBLE DIVIDE)" | session2Mono$Rule == "(TRIPLE INCREMENT ADD)"
aggregate(session2Mono$EncodingRT,list(session2Mono$Practiced),mean)
aggregate(session2Mono$ExecutionRT,list(session2Mono$Practiced),mean)
library(ggplot2)
session2Mono$lang <- "Monolingual"
modelMonolingual <- read.csv("~/Documents/GitHub/ACTR_RITL/modelMonolingual.txt")
session2Mono <- modelMonolingual[21:60,]
session2Mono$Practiced <- session2Mono$Rule == "(INCREMENT DOUBLE DIVIDE)" | session2Mono$Rule == "(TRIPLE INCREMENT ADD)"
aggregate(session2Mono$EncodingRT,list(session2Mono$Practiced),mean)
aggregate(session2Mono$ExecutionRT,list(session2Mono$Practiced),mean)
library(data.table)
library(ggplot2)
## Read separate files (disabled)
fileList <- list.files("~/GitHub/ACTR_RITL/simulations_02/bilingual",pattern=".txt")
# Select parameters aplha ans imaginal-delay le nu
specificParams <- c(0.000, 0.010, 0.150, 0.900, 0.000)
#
# for (i in 1:length(fileList)) {
#   dat <- read.csv(paste("~/Documents/GitHub/ACTR_RITL/simulations_02/bilingual/", fileList[i], sep = ""),
#            header=T,
#            stringsAsFactors = F)
#   assign(paste("sim",i,sep=""), dat)
# }
# Index practice trials
add19 <- function(x) {x+(0:19)}
practice <- as.vector(sapply(seq(1,6000,by = 60), add19))
# dat <- dat[-practice,]
# dat$language <- "bilingual"
# dat$practiced <- dat$Rule == "(INCREMENT DOUBLE DIVIDE)" | dat$Rule == "(TRIPLE INCREMENT ADD)"
#
# aggregate(dat$EncodingRT,list(dat$Practiced),mean)
# aggregate(dat$ExecutionRT,list(dat$Practiced),mean)
## One Gigantic Data Table
DTbi <- rbindlist( sapply(paste("~/GitHub/ACTR_RITL/simulations_02/bilingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
practice <- as.vector(sapply(seq(1,nrow(DTbi),by = 60), add19))
DTbi <- DTbi[-practice,]
for (i in 1:length(fileList)) {
dat <- read.csv(paste("~/Documents/GitHub/ACTR_RITL/simulations_02/bilingual/", fileList[i], sep = ""),
header=T,
stringsAsFactors = F)
assign(paste("sim",i,sep=""), dat)
}
for (i in 1:length(fileList)) {
dat <- read.csv(paste("~/GitHub/ACTR_RITL/simulations_02/bilingual/", fileList[i], sep = ""),
header=T,
stringsAsFactors = F)
assign(paste("sim",i,sep=""), dat)
}
View(sim1763)
## Read separate files (disabled)
fileList <- list.files("~/GitHub/ACTR_RITL/simulations_02/bilingual",pattern=".txt")
# Select files with only default :le and :nu
fileList <- fileList[grepl("le_1.000_nu_0.000",fileList),]
fileList <- fileList[grepl("le_1.000_nu_0.000",fileList)]
## One Gigantic Data Table
DTbi <- rbindlist( sapply(paste("~/GitHub/ACTR_RITL/simulations_02/bilingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
# Remove practice trials
add19 <- function(x) {x+(0:19)}
practice <- as.vector(sapply(seq(1,nrow(DTbi),by = 60), add19))
DTbi <- DTbi[-practice,]
DTbi$language <- "bilingual"
DTbi$practiced <- DTbi$Rule == "(INCREMENT DOUBLE DIVIDE)" | DTbi$Rule == "(TRIPLE INCREMENT ADD)"
DTbi$trial <- rep(1:40,length.out = nrow(DTbi))
vars <- c("practiced", "alpha", "ans", "imaginal-delay", "le", "nu", "RT")
biEncoding <- aggregate(DTbi$EncodingRT,list(DTbi$practiced, DTbi$alpha, DTbi$ans, DTbi$`imaginal-delay`,DTbi$le,DTbi$nu),mean)
colnames(biEncoding) <- vars
biExecution <- aggregate(DTbi$ExecutionRT,list(DTbi$practiced, DTbi$alpha, DTbi$ans, DTbi$`imaginal-delay`,DTbi$le,DTbi$nu),mean)
colnames(biExecution) <- vars
# Separate Novel and practiced trials
summary(biEncoding[biEncoding$practiced == F,]$RT)
summary(biEncoding[biEncoding$practiced == T,]$RT)
# Proportions correctly predicted
# Separate Novel and practiced trials execution
summary(biExecution[biExecution$practiced == F,]$RT)
summary(biExecution[biExecution$practiced == T,]$RT)
deltaBiEncoding <- (biEncoding[biEncoding$practiced == F,]$RT - biEncoding[biEncoding$practiced == T,]$RT)
summary(deltaBiEncoding)
hist(deltaBiEncoding)
sum(deltaBiEncoding > 0) / length(deltaBiEncoding)
deltaBiExecution <- (biExecution[biExecution$practiced == F,]$RT - biExecution[biExecution$practiced == T,]$RT)
summary(deltaBiExecution)
hist(deltaBiExecution)
sum(deltaBiExecution > 0) / length(deltaBiExecution)
View(DTbi)
View(DTbi)
practice
tail(practice)
practice[599528]
## One Gigantic Data Table
fileList <- list.files("~/GitHub/ACTR_RITL/simulations_02/monolingual",pattern=".txt")
# Select files with only default :le and :nu
fileList <- fileList[grepl("le_1.000_nu_0.000",fileList)]
DTmono <- rbindlist( sapply(paste("/projects/actr/models/ACTR_RITL/simulations_02/monolingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
practice <- as.vector(sapply(seq(1,nrow(DTmono),by = 60), add19))
DTmono <- DTmono[-practice,]
DTmono$language <- "monolingual"
DTmono$practiced <- DTmono$Rule == "(INCREMENT DOUBLE DIVIDE)" | DTmono$Rule == "(TRIPLE INCREMENT ADD)"
DTmono$trial <- rep(1:40,length.out = nrow(DTmono))
monoEncoding <- aggregate(DTmono$EncodingRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoEncoding) <- vars
monoExecution <- aggregate(DTmono$ExecutionRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoExecution) <- vars
# Separate Novel and practiced trials encoding
summary(monoEncoding[monoEncoding$practiced == F,]$RT)
summary(monoEncoding[monoEncoding$practiced == T,]$RT)
# Separate Novel and practiced trials execution
summary(monoExecution[monoExecution$practiced == F,]$RT)
summary(monoExecution[monoExecution$practiced == T,]$RT)
deltaMonoEncoding <- (monoEncoding[monoEncoding$practiced == F,]$RT - monoEncoding[monoEncoding$practiced == T,]$RT)
summary(deltaMonoEncoding)
hist(deltaMonoEncoding)
sum(deltaMonoEncoding > 0) / length(deltaMonoEncoding)
deltaMonoExecution <- (monoExecution[monoExecution$practiced == F,]$RT - monoExecution[monoExecution$practiced == T,]$RT)
summary(deltaMonoExecution)
hist(deltaMonoExecution)
sum(deltaMonoExecution > 0) / length(deltaMonoExecution)
# write.csv(monoEncoding, "monolingualEncoding.csv")
# write.csv(monoExecution, "monolingualExecution.csv")
DTComplete <- rbind(DTmono,DTbi)
## One Gigantic Data Table
fileList <- list.files("~/GitHub/ACTR_RITL/simulations_02/monolingual",pattern=".txt")
# Select files with only default :le and :nu
fileList <- fileList[grepl("le_1.000_nu_0.000",fileList)]
DTmono <- rbindlist( sapply(paste("/GitHub/ACTR_RITL/simulations_02/monolingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
practice <- as.vector(sapply(seq(1,nrow(DTmono),by = 60), add19))
DTmono <- DTmono[-practice,]
DTmono$language <- "monolingual"
DTmono$practiced <- DTmono$Rule == "(INCREMENT DOUBLE DIVIDE)" | DTmono$Rule == "(TRIPLE INCREMENT ADD)"
DTmono$trial <- rep(1:40,length.out = nrow(DTmono))
monoEncoding <- aggregate(DTmono$EncodingRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoEncoding) <- vars
monoExecution <- aggregate(DTmono$ExecutionRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoExecution) <- vars
# Separate Novel and practiced trials encoding
summary(monoEncoding[monoEncoding$practiced == F,]$RT)
summary(monoEncoding[monoEncoding$practiced == T,]$RT)
# Separate Novel and practiced trials execution
summary(monoExecution[monoExecution$practiced == F,]$RT)
summary(monoExecution[monoExecution$practiced == T,]$RT)
deltaMonoEncoding <- (monoEncoding[monoEncoding$practiced == F,]$RT - monoEncoding[monoEncoding$practiced == T,]$RT)
summary(deltaMonoEncoding)
hist(deltaMonoEncoding)
sum(deltaMonoEncoding > 0) / length(deltaMonoEncoding)
deltaMonoExecution <- (monoExecution[monoExecution$practiced == F,]$RT - monoExecution[monoExecution$practiced == T,]$RT)
summary(deltaMonoExecution)
hist(deltaMonoExecution)
sum(deltaMonoExecution > 0) / length(deltaMonoExecution)
# write.csv(monoEncoding, "monolingualEncoding.csv")
# write.csv(monoExecution, "monolingualExecution.csv")
DTComplete <- rbind(DTmono,DTbi)
## One Gigantic Data Table
fileList <- list.files("~/GitHub/ACTR_RITL/simulations_02/monolingual",pattern=".txt")
# Select files with only default :le and :nu
fileList <- fileList[grepl("le_1.000_nu_0.000",fileList)]
DTmono <- rbindlist( sapply(paste("/GitHub/ACTR_RITL/simulations_02/monolingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
DTmono <- rbindlist( sapply(paste("~/GitHub/ACTR_RITL/simulations_02/monolingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
practice <- as.vector(sapply(seq(1,nrow(DTmono),by = 60), add19))
DTmono <- DTmono[-practice,]
DTmono$language <- "monolingual"
DTmono$practiced <- DTmono$Rule == "(INCREMENT DOUBLE DIVIDE)" | DTmono$Rule == "(TRIPLE INCREMENT ADD)"
DTmono$trial <- rep(1:40,length.out = nrow(DTmono))
monoEncoding <- aggregate(DTmono$EncodingRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoEncoding) <- vars
monoExecution <- aggregate(DTmono$ExecutionRT,list(DTmono$practiced, DTmono$alpha, DTmono$ans, DTmono$`imaginal-delay`,DTmono$le,DTmono$nu),mean)
colnames(monoExecution) <- vars
# Separate Novel and practiced trials encoding
summary(monoEncoding[monoEncoding$practiced == F,]$RT)
summary(monoEncoding[monoEncoding$practiced == T,]$RT)
# Separate Novel and practiced trials execution
summary(monoExecution[monoExecution$practiced == F,]$RT)
summary(monoExecution[monoExecution$practiced == T,]$RT)
deltaMonoEncoding <- (monoEncoding[monoEncoding$practiced == F,]$RT - monoEncoding[monoEncoding$practiced == T,]$RT)
summary(deltaMonoEncoding)
hist(deltaMonoEncoding)
sum(deltaMonoEncoding > 0) / length(deltaMonoEncoding)
deltaMonoExecution <- (monoExecution[monoExecution$practiced == F,]$RT - monoExecution[monoExecution$practiced == T,]$RT)
summary(deltaMonoExecution)
hist(deltaMonoExecution)
sum(deltaMonoExecution > 0) / length(deltaMonoExecution)
# write.csv(monoEncoding, "monolingualEncoding.csv")
# write.csv(monoExecution, "monolingualExecution.csv")
DTComplete <- rbind(DTmono,DTbi)
## Read experiment data
fileList <- list.files("~/GitHub/ACTR_RITL/RITLExperimentData/", pattern=".txt")
DTExperiment <- rbindlist( sapply(paste("~/GitHub/ACTR_RITL/RITLExperimentData/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "FileName")
DTExperiment <- DTExperiment[DTExperiment$Execution.RT != 0 | DTExperiment$Encoding.RT != 0,] # Remove rts of 0 ms
DTExperiment <- DTExperiment[,-c("Procedure","Running")]
subjects <- read.table("~/GitHub/ACTR_RITL/subjects_final_version.txt")  #Has all subject names (but V9 also exists??)
DTExperiment <- merge(DTExperiment,subjects, by.x="Subject",by.y = "V1", all.y =T)
View(DTExperiment)
# Aggregate by trial number, practiced, and language
experimentEnc <- aggregate(DTExperiment$Encoding.RT, by = list(DTExperiment$Practiced, DTExperiment$V2), mean)
experimentEnc$Group.1 <- c(FALSE, TRUE,FALSE,TRUE)
## Attempt to get error
error <- function(simulations, experiment) {
simulations$error <- sqrt((simulations$RT - (experiment/1000))**2) # Get error per observation, square and sqrt
byParams <- aggregate(simulations$error, by = list(simulations$alpha, simulations$ans, simulations$`imaginal-delay`,simulations$le,simulations$nu), mean) #Get mean error per set of parameters
t(unlist(subset(byParams, byParams$x == min(byParams$x)))) # get parameter set with least error
}
paramsBiEnc <- error(biEncoding[biEncoding$practiced == F,], experimentEnc$x[(experimentEnc$Group.1 == "No") & (experimentEnc$Group.2 == "Bilingual")])
paramsBiEnc <- rbind(paramsBiEnc, error(biEncoding[biEncoding$practiced == T,], experimentEnc$x[(experimentEnc$Group.1 == "Yes") & (experimentEnc$Group.2 == "Bilingual")]))
paramsMonoEnc <- error(monoEncoding[monoEncoding$practiced == F,], experimentEnc$x[(experimentEnc$Group.1 == "No") & (experimentEnc$Group.2 == "Monolingual")])
paramsMonoEnc <- rbind(paramsMonoEnc, error(monoEncoding[monoEncoding$practiced == T,], experimentEnc$x[(experimentEnc$Group.1 == "Yes") & (experimentEnc$Group.2 == "Monolingual")]))
# Make images
plotEncoding <- function(paramsBi, paramsMono, DTbi, DTmono) {
novelBi <- subset(DTbi, (practiced == F) & (alpha == paramsBi[1,1]) & (ans == paramsBi[1,2]) & (`imaginal-delay` == paramsBi[1,3]) & (le == paramsBi[1,4]) & (nu == paramsBi[1,5])) #Make sure novel is on row 1
print(mean(novelBi$EncodingRT*1000))
practicedBi <- subset(DTbi, (practiced == T) & (alpha == paramsBi[2,1]) & (ans == paramsBi[2,2]) & (`imaginal-delay` == paramsBi[2,3]) & (le == paramsBi[2,4]) & (nu == paramsBi[2,5]))
print(mean(practicedBi$EncodingRT*1000))
novelMono <- subset(DTmono, (practiced == F) & (alpha == paramsMono[1,1]) & (ans == paramsMono[1,2]) & (`imaginal-delay` == paramsMono[1,3]) & (le == paramsMono[1,4]) & (nu == paramsMono[1,5]))
print(mean(novelMono$EncodingRT*1000))
practicedMono <- subset(DTmono, (practiced == T) & (alpha == paramsMono[2,1]) & (ans == paramsMono[2,2]) & (`imaginal-delay` == paramsMono[2,3]) & (le == paramsMono[2,4]) & (nu == paramsMono[2,5]))
print(mean(practicedMono$EncodingRT*1000))
merged <- rbind(novelBi,practicedBi,novelMono,practicedMono)
ggplot(merged, aes(language,EncodingRT*1000,fill=practiced)) +
geom_bar(stat = "summary", fun.y=mean,position = "dodge") +
scale_fill_grey(start= 0.8, end = 0.2, breaks=c(FALSE,TRUE), labels=c("Novel", "Practiced"), name="") +
theme_bw() +
labs(title = "Encoding Times", y = "Response Time (ms)", x ="") + ylim(0,5000)
}
plotEncoding(paramsBiEnc,paramsMonoEnc,DTbi,DTmono)
experimentEx <- aggregate(DTExperiment$Execution.RT, by = list(DTExperiment$Practiced, DTExperiment$V2), mean)
experimentEx$Group.1 <- c(FALSE, TRUE,FALSE,TRUE)
paramsBiEx <- error(biExecution[biExecution$practiced == F,], experimentEx$x[(experimentEx$Group.1 == "No") & (experimentEx$Group.2 == "Bilingual")])
paramsBiEx <- rbind(paramsBiEx, error(biExecution[biExecution$practiced == T,], experimentEx$x[(experimentEx$Group.1 == "Yes") & (experimentEx$Group.2 == "Bilingual")]))
paramsMonoEx <- error(monoExecution[monoExecution$practiced == F,], experimentEx$x[(experimentEx$Group.1 == "No") & (experimentEx$Group.2 == "Monolingual")])
paramsMonoEx <- rbind(paramsMonoEx, error(monoExecution[monoExecution$practiced == T,], experimentEx$x[(experimentEx$Group.1 == "Yes") & (experimentEx$Group.2 == "Monolingual")]))
# Make images
plotExecution <- function(paramsBi, paramsMono, DTbi, DTmono) {
novelBi <- subset(DTbi, (practiced == F) & (alpha == paramsBi[1,1]) & (ans == paramsBi[1,2]) & (`imaginal-delay` == paramsBi[1,3]) & (le == paramsBi[1,4]) & (nu == paramsBi[1,5])) #Make sure novel is on row 1
print(mean(novelBi$ExecutionRT*1000))
practicedBi <- subset(DTbi, (practiced == T) & (alpha == paramsBi[2,1]) & (ans == paramsBi[2,2]) & (`imaginal-delay` == paramsBi[2,3]) & (le == paramsBi[2,4]) & (nu == paramsBi[2,5]))
print(mean(practicedBi$ExecutionRT*1000))
novelMono <- subset(DTmono, (practiced == F) & (alpha == paramsMono[1,1]) & (ans == paramsMono[1,2]) & (`imaginal-delay` == paramsMono[1,3]) & (le == paramsMono[1,4]) & (nu == paramsMono[1,5]))
print(mean(novelMono$ExecutionRT*1000))
practicedMono <- subset(DTmono, (practiced == T) & (alpha == paramsMono[2,1]) & (ans == paramsMono[2,2]) & (`imaginal-delay` == paramsMono[2,3]) & (le == paramsMono[2,4]) & (nu == paramsMono[2,5]))
print(mean(practicedMono$ExecutionRT*1000))
merged <- rbind(novelBi,practicedBi,novelMono,practicedMono)
ggplot(merged, aes(language,ExecutionRT*1000,fill=practiced)) +
geom_bar(stat = "summary", fun.y=mean,position = "dodge") +
scale_fill_grey(start= 0.8, end = 0.2, breaks=c(FALSE,TRUE), labels=c("Novel", "Practiced"), name="") +
theme_bw() +
labs(title = "Execution Times", y = "Response Time (ms)", x ="") + ylim(0,5000)
}
plotExecution(paramsBiEx,paramsMonoEx,DTbi,DTmono)
paramsBiEnc <- error(biEncoding[biEncoding$practiced == F,], experimentEnc$x[(experimentEnc$Group.1 == "No") & (experimentEnc$Group.2 == "Bilingual")])
paramsBiEnc <- rbind(paramsBiEnc, error(biEncoding[biEncoding$practiced == T,], experimentEnc$x[(experimentEnc$Group.1 == "Yes") & (experimentEnc$Group.2 == "Bilingual")]))
paramsMonoEnc <- error(monoEncoding[monoEncoding$practiced == F,], experimentEnc$x[(experimentEnc$Group.1 == "No") & (experimentEnc$Group.2 == "Monolingual")])
paramsMonoEnc <- rbind(paramsMonoEnc, error(monoEncoding[monoEncoding$practiced == T,], experimentEnc$x[(experimentEnc$Group.1 == "Yes") & (experimentEnc$Group.2 == "Monolingual")]))
# Aggregate by trial number, practiced, and language
experimentEnc <- aggregate(DTExperiment$Encoding.RT, by = list(DTExperiment$Practiced, DTExperiment$V2), mean)
experimentEnc$Group.1 <- c(FALSE, TRUE,FALSE,TRUE)
head(subjects)
# Aggregate by trial number, practiced, and language
experimentEnc <- aggregate(DTExperiment$Encoding.RT, by = list(DTExperiment$Practiced, DTExperiment$V1), mean)
experimentEnc$Group.1 <- c(FALSE, TRUE,FALSE,TRUE)
View(DTExperiment)
DTExperiment <- merge(DTExperiment,subjects, by.x="Subject",by.y = "V1", all.y =T)
unique(subjects$V1)
unique(DTExperiment$Subject)
subjects
View(allParams)
meanRTs <- cbind(experimentEnc, experimentEx$x)
colnames(meanRTs) <- c("practiced","language","EncRT","ExRT")
allParams <- unique(aggregatedComplete[,c('alpha','ans','imaginal-delay','le','nu')])
for (i in 1:nrow(allParams)) {
dat <- DTComplete[(alpha == allParams[i,1]) & (ans == allParams[i,2]) & (`imaginal-delay` == allParams[i,3]) & (le == allParams[i,4]) & (nu == allParams[i,5]),]
aggregated <- aggregate(dat$EncodingRT, by = list(dat$practiced, dat$language), mean)
aggregated <- cbind(aggregated, aggregate(dat$ExecutionRT, by = list(dat$practiced, dat$language), mean)$x)
colnames(aggregated) <- c("practiced","language","EncRT","ExRT")
allParams$EncCor[i] <- cor(meanRTs$EncRT,aggregated$EncRT)
allParams$ExCor[i] <- cor(meanRTs$ExRT,aggregated$ExRT)
allParams$cor[i] <- allParams$EncCor[i] + allParams$ExCor[i]
}
corParams <- t(unlist(subset(allParams, allParams$cor == max(allParams$cor)))) # get parameter set with least error
library(data.table)
library(ggplot2)
## Read separate files (disabled)
fileList <- list.files("/projects/actr/models/ACTR_RITL/simulations_02/bilingual",pattern=".txt")
# Select files with only default :le and :nu
fileList <- fileList[grepl("alpha_0.100_ans_0.040_imaginal-delay_0.200_le_1.000_nu_0.000",fileList)]
## One Gigantic Data Table
DTbi <- rbindlist( sapply(paste("/projects/actr/models/ACTR_RITL/simulations_02/bilingual/", fileList, sep=""), fread, simplify = FALSE),
use.names = TRUE, idcol = "idx" )
# Remove practice trials
add19 <- function(x) {x+(0:19)}
practice <- as.vector(sapply(seq(1,nrow(DTbi),by = 60), add19)) # The first 20 rows of every 60 rows are practice trials
DTbi <- DTbi[-practice,]
DTbi$language <- "bilingual"
DTbi$practiced <- DTbi$Rule == "(INCREMENT DOUBLE DIVIDE)" | DTbi$Rule == "(TRIPLE INCREMENT ADD)"
DTbi$trial <- rep(1:40,length.out = nrow(DTbi))
vars <- c("practiced", "alpha", "ans", "imaginal-delay", "le", "nu", "RT")
biEncoding <- aggregate(DTbi$EncodingRT,list(DTbi$practiced, DTbi$alpha, DTbi$ans, DTbi$`imaginal-delay`,DTbi$le,DTbi$nu),mean)
